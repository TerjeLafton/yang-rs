module system {
    prefix "sys";
    namespace "org.system";
    yang-version 1.1;

    organization "System Organization";
    contact "test@system.org";
    description "System module";
    reference "See system.com";

    revision "2025-04-02" {
        description "Initial revision";
        reference "None";
    }

    import ietf-inet-types {
        prefix "inet";
        revision-date "2023-01-01";
        description "Internet types";
        reference "https://tools.ietf.org/html/rfc791";
    }

    include example-types;

    typedef percent {
        description "Percentage value";
        type uint8 {
            range "0..100" {
                error-message "Value must be between 0 and 100";
                error-app-tag "PERCENT_RANGE_ERROR";
                description "Percentage value";
                reference "https://tools.ietf.org/html/rfc791";
            }
        }
        units "percent";
    }

    typedef temperature {
        type decimal64 {
            fraction-digits 2;
            range "-50.00..100.00";
        }
        units "degrees Celsius";
        description "Temperature value with 2 decimal places";
    }

    typedef hostname {
        type string {
            length "1..253";
            pattern '[a-zA-Z0-9][-a-zA-Z0-9]*(\.[a-zA-Z0-9][-a-zA-Z0-9]*)*';
            pattern '.*[a-zA-Z].*' {
                modifier invert-match;
            }
        }
        description "A domain name as specified in RFC 1034 with restrictions from RFC 952";
        reference "RFC 1034, RFC 952";
    }

    typedef connection-status {
        type enumeration {
            enum connected {
                description "The connection is active and operating normally";
                value 1;
            }
            enum disconnected {
                if-feature "advanced-status-reporting";
                if-feature "disconnection-support";
                description "The connection is inactive";
                value 2;
            }
            enum connecting {
                description "The connection is being established";
                value 3;
            }
            enum failed {
                description "The connection has failed";
                value 4;
                status deprecated;
            }
        }
        description "The operational status of a connection";
        reference "RFC XYZ, Section 3.2";
    }


    typedef interface-name {
        type leafref {
            path "/interfaces/interface/name";
            require-instance true;
        }
        description "A reference to an existing interface name";
        reference "RFC 8343: A YANG Data Model for Interface Management";
    }

    typedef config-target {
        type instance-identifier {
            require-instance true;
        }
        description "A reference to a specific configuration node in the data tree";
        reference "RFC 6020, Section 9.13: The instance-identifier built-in type";
    }

    typedef interface-type {
        type identityref {
            base physical-interface;
            base logical-interface;
        }
        description "A reference to an interface type identity";
        reference "RFC 8343: A YANG Data Model for Interface Management";
    }

    typedef interface-flags {
        type bits {
            bit up {
            position 0;
            description "Interface is administratively up";
            }
            bit broadcast {
            position 1;
            description "Interface supports broadcast";
            }
            bit multicast {
            position 2;
            description "Interface supports multicast";
            }
        }
        description "Flags indicating interface capabilities and state";
        reference "RFC 8343: A YANG Data Model for Interface Management";
    }

    typedef certificate {
        type binary {
            length "128..4096";
        }
        description "An X.509 certificate in DER encoding";
        reference "RFC 5280: Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile";
    }

    typedef ip-address {
        type union {
            type inet:ipv4-address {
                pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?';
            }
            type inet:ipv6-address {
                pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?';
            }
        }
        description "An IP address (either IPv4 or IPv6)";
        reference "RFC 6991: Common YANG Data Types";
    }

    extension my-extension {
        argument my-arg;
        status current;
        description "This is a custom extension that adds functionality X";
        reference "RFC XXXX, Section Y.Y";
    }

    feature advanced-security {
        if-feature basic-security;
        status current;
        description "Provides advanced security capabilities including encryption and key management";
        reference "Security Framework v2.0, Section 3.4";
    }

    leaf interface-name {
        when "../type = 'ethernet'";
        if-feature ethernet-interfaces;
        type string {
            length "1..32";
        }
        units "chars";
        must "not(contains(., ' '))";
        default "eth0";
        config true;
        mandatory false;
        status current;
        description "The name of the network interface";
        reference "Interface Naming Convention v1.2";
    }

    leaf-list supported-protocols {
        when "../device-type = 'router'";
        if-feature protocol-support;
        type enumeration {
            enum "http";
            enum "https";
            enum "ssh";
            enum "telnet";
            enum "snmp";
        }
        units "protocol";
        must "count(.) > 0";
        default "ssh";
        config true;
        min-elements 1;
        max-elements "unbound";
        ordered-by user;
        status current;
        description "List of management protocols supported by this device";
        reference "Network Protocol Standards v3.0";
    }
}
